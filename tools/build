#!/usr/bin/env zsh

# This script assembles the folder structure for the mission files. It will then attempt to detect what PBO tool is available (some day) and use that to pack the mission file.

# Global variables
cwd=$(pwd)
# Base mission name; will be used to create mission folders with the map name appended
missionName="2nd-platoon-private-zeus"
# Map names, generated from the folders placed in the maps folder; should have mission.sqm file, and either a description_map.inc or a .skip-scripts file
mapFolders=$(ls -1d maps/*/ | cut -f2 -d\/)
supportedMaps=(${=mapFolders})
# create temp folder with fallback for macos
buildFolder="${cwd}/build"
mkdir -p $buildFolder
# detect PBO tool and set it to the variable pboTool
pboTool=""
if command -v armake2 &> /dev/null
then
    pboTool="armake2"
else
    echo "No PBO tool found. Please install armake2 (cargo install armake2)."
    exit 1
fi
# TODO: detect zip installed
zipTool=""
if command -v zip &> /dev/null
then
    zipTool="zip"
else
    echo "No ZIP tool found. Please install zip / unzip for the command line."
    exit 1
fi

# MARK: - Functions
function setupBuildFolder {
    # Create mission folder(s) in temp folder
    for map in "${supportedMaps[@]}"
    do
        local sourceFolder="maps/${map}"
        local mapFolder="${missionName}.${map}"
        local targetFolder="${buildFolder}/${mapFolder}"
        # if the target folder exists, remove it
        if [ -d "${targetFolder}" ]; then
            rm -rf "${targetFolder}"
        fi
        cp -r "${sourceFolder}" "${targetFolder}/"
        copyMissionSettings "${targetFolder}/"
        if _skipScripts "${sourceFolder}"; then
            continue
        fi
        copyParadigm "${targetFolder}/"
        copyParadigmConfig "${targetFolder}/"
        copyCustomFunctions "${targetFolder}/"
    done
}

function copyMissionSettings {
    local missionFolder=$1
    if _skipScripts "${missionFolder}"; then
        cp description.ext.skip-scripts "${missionFolder}/description.ext"
    else 
        cp description.ext "${missionFolder}/"
    fi
    cp cba_settings.sqf "${missionFolder}/"
}

function copyParadigm {
    local missionFolder=$1
    cp -r "paradigm" "${missionFolder}"
    cp para_*.sqf "${missionFolder}"
}

function copyParadigmConfig {
    local missionFolder=$1
    cp -r "config" "${missionFolder}/"
}

function copyCustomFunctions {
    local missionFolder=$1
    cp -r "FirstCAV" "${missionFolder}/"
}

function packMissions {
    # Pack the mission(s)
    cd "${buildFolder}"

    for map in "${supportedMaps[@]}"
    do
        local mapFolder="${missionName}.${map}"
        echo "Packing build/${mapFolder}.pbo"
        $pboTool pack "${mapFolder}" "${mapFolder}.pbo"
        echo "Creating build/${mapFolder}.zip"
        $zipTool -r "${mapFolder}.zip" "${mapFolder}"
    done
    cd "${cwd}"
}

function updateGitSubmodules {
    # if the .submodules-updated file exists, quietly exit this function and continue the script
    if [ -f "${cwd}/.submodules-updated" ]; then
        return
    fi
    # Update git submodules
    git submodule update --init --recursive
    touch "${cwd}/.submodules-updated"
}

function _skipScripts {
    local missionFolder=$1
    local scriptFlag="${missionFolder}/.skip-scripts"

    if [ -f "${scriptFlag}" ]; then
        return 0
    else
        return 1
    fi
}

# MARK: - Main function
function main {
    updateGitSubmodules
    setupBuildFolder
    packMissions
}

# Run the main function
main