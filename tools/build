#!/usr/bin/env zsh

# This script assembles the folder structure for the mission file. It will then attempt to detect what PBO tool is available and use that to pack the mission file.

# Global variables
cwd=$(pwd)
# eventually will be a list of all the mission setups available for each map available
missionNames=("2nd-platoon-private-zeus-nam" "dummy")
supportedMaps=("Cam_Lao_Nam" "example")
missionFolders=()
for map in "${supportedMaps[@]}"
do
    for missionName in "${missionNames[@]}"
    do
        local mapFolder="${missionName}.${map}"
        # if the source mission folder does not exist, continue the loop, skipping this mission.map combo
        if [ ! -d "${mapFolder}" ]; then
            continue
        fi
        missionFolders+=("${mapFolder}")
    done
done
# create temp folder with fallback for macos
buildFolder="${cwd}/build"
mkdir -p $buildFolder
# detect PBO tool and set it to the variable pboTool
pboTool=""
if command -v armake2 &> /dev/null
then
    pboTool="armake2"
else
    echo "No PBO tool found. Please install armake2."
    exit 1
fi
# TODO: detect zip installed
zipTool=""
if command -v zip &> /dev/null
then
    zipTool="zip"
else
    echo "No ZIP tool found. Please install zip / unzip."
    exit 1
fi

# MARK: - Functions
function setupBuildFolder {
    # Create mission folder(s) in temp folder
    for mapFolder in "${missionFolders[@]}"
    do
        # if the source mission folder does not exist, continue the loop, skipping this mission.map combo
        if [ ! -d "${mapFolder}" ]; then
            continue
        fi
        local targetFolder="${buildFolder}/${mapFolder}"
        # if the target folder exists, remove it
        if [ -d "${targetFolder}" ]; then
            rm -rf "${targetFolder}"
        fi
        cp -r "${mapFolder}" "${buildFolder}/"
        cp -r "FirstCAV" "${targetFolder}/"
        cp -r "config" "${targetFolder}/"
        copyParadigm "${targetFolder}/"
    done
}

function copyParadigm {
    local missionFolder=$1
    cp -r "paradigm" "${missionFolder}"
    cp para_*.sqf "${missionFolder}"
}

function packMissions {
    # Pack the mission(s)
    cd "${buildFolder}"
    for mapFolder in "${missionFolders[@]}"
    do
        # if the source mission folder does not exist, continue the loop, skipping this mission.map combo
        if [ ! -d "${mapFolder}" ]; then
            continue
        fi
        echo "Packing build/${mapFolder}.pbo"
        $pboTool pack "${mapFolder}" "${mapFolder}.pbo"
        echo "Creating build/${mapFolder}.zip"
        $zipTool -r "${mapFolder}.zip" "${mapFolder}"
    done
    cd "${cwd}"
}

function updateGitSubmodules {
    # if the .submodules-updated file exists, quietly exit this function and continue the script
    if [ -f "${cwd}/.submodules-updated" ]; then
        return
    fi
    # Update git submodules
    git submodule update --init --recursive
    touch "${cwd}/.submodules-updated"
}

# MARK: - Main function
function main {
    updateGitSubmodules
    setupBuildFolder
    packMissions
}

# Run the main function
main